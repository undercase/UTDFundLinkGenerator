{"version":3,"sources":["Radio.js","Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Radio","react_default","a","createElement","className","type","name","this","props","value","checked","selectedOption","onChange","handleOptionChange","label","Component","Checkbox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleCheckboxChange","_this$props","handleCheckboxChange","setState","_ref","isChecked","state","_this$props2","giftAmounts","pledgeAmounts","designations","App","componentWillMount","selectedDesignations","Set","e","defineProperty","target","toggleCheckbox","has","delete","add","forceUpdate","bboxdonation$gift$BBFormGiftChoice","bboxdonation$gift$GivingLevel","bboxdonation$gift$PledgeAmount","copySuccess","Array","from","base","concat","reduce","accumulator","designation","donationAmountButtons","_this2","map","amount","Radio_Radio","key","designationCheckboxes","Checkbox_Checkbox","href","buildURI","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac381313.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nexport default class Radio extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"radioButton\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name={this.props.name}\r\n            value={this.props.value}\r\n            checked={this.props.selectedOption === this.props.value}\r\n            onChange={this.props.handleOptionChange}\r\n          />\r\n          {this.props.label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React,{Component} from 'react';\r\n\r\nexport default class Checkbox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isChecked: false\r\n    };\r\n  }\r\n\r\n  toggleCheckboxChange = () => {\r\n    const { handleCheckboxChange, value } = this.props;\r\n\r\n    this.setState(({ isChecked }) => (\r\n      {\r\n        isChecked: !isChecked,\r\n      }\r\n    ));\r\n\r\n    handleCheckboxChange(value);\r\n  }\r\n\r\n  render() {\r\n    const { label, value } = this.props;\r\n    const { isChecked } = this.state;\r\n\r\n    return (\r\n      <div className=\"checkbox\">\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            value={value}\r\n            checked={isChecked}\r\n            onChange={this.toggleCheckboxChange}\r\n          />\r\n\r\n          {label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React,{Component} from 'react';\nimport {stringify} from 'querystring';\nimport './App.css';\n\nimport Radio from './Radio.js';\nimport Checkbox from './Checkbox.js';\n\nconst giftAmounts = [\n  \"25\",\n  \"50\",\n  \"100\",\n  \"250\",\n  \"500\",\n  \"1000\",\n  \"2500\",\n  \"5000\"\n];\n\nconst pledgeAmounts = [\n  \"60\",\n  \"120\",\n  \"240\",\n  \"480\",\n  \"1000\",\n  \"2500\",\n  \"5000\",\n  \"10000\"\n];\n\nconst designations = [\n  {\n    value: \"3\",\n    label: \"Area of Greatest Need\"\n  },\n  {\n    value: \"301\",\n    label: \"Athletics\"\n  },\n  {\n    value: \"435\",\n    label: \"Ackerman Center for Holocaust Studies\"\n  },\n  {\n    value: \"2\",\n    label: \"Alumni Relations\"\n  },\n  {\n    value: \"386\",\n    label: \"School of Arts & Humanities\"\n  },\n  {\n    value: \"1895\",\n    label: \"Arts, Technology, and Emerging Communication\"\n  },\n  {\n    value: \"1221\",\n    label: \"Asia Center\"\n  },\n  {\n    value: \"472\",\n    label: \"Behavioral and Brain Sciences\"\n  },\n  {\n    value: \"727\",\n    label: \"Callier Center for Communication Disorders\"\n  },\n  {\n    value: \"276\",\n    label: \"Center for BrainHealth\"\n  },\n  {\n    value: \"1395\",\n    label: \"Center for Vital Longevity\"\n  },\n  {\n    value: \"721\",\n    label: \"Economic, Political and Policy Sciences\"\n  },\n  {\n    value: \"692\",\n    label: \"Eugene McDermott Scholars Program\"\n  },\n  {\n    value: \"485\",\n    label: \"Friends of McDermott Library\"\n  },\n  {\n    value: \"2118\",\n    label: \"Fund for UT Dallas\"\n  },\n  {\n    value: \"289\",\n    label: \"Galerstein Gender Center\"\n  },\n  {\n    value: \"83\",\n    label: \"Interdisciplinary Studies (General Studies)\"\n  },\n  {\n    value: \"84\",\n    label: \"Johnsson School of Engineering & Computer Science\"\n  },\n  {\n    value: \"2259\",\n    label: \"Margaret McDermott Memorial Fund\"\n  },\n  {\n    value: \"39\",\n    label: \"Naveen Jindal School of Management\"\n  },\n  {\n    value: \"299\",\n    label: \"School of Natural Sciences and Mathematics\"\n  },\n  {\n    value: \"1011\",\n    label: \"Office of Diversity and Community Engagement\"\n  },\n  {\n    value: \"139\",\n    label: \"Scholarships and Fellowships\"\n  }\n];\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"bboxdonation$gift$BBFormGiftChoice\": \"bboxdonation_gift_lblChoiceSingleGift\",\n      \"bboxdonation$gift$GivingLevel\": \"100\",\n      \"bboxdonation$gift$PledgeAmount\": \"60\",\n      copySuccess: \"\"\n    };\n  }\n\n  componentWillMount = () => {\n    this.selectedDesignations = new Set();\n  }\n\n  handleOptionChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  toggleCheckbox = label => {\n    if (this.selectedDesignations.has(label)) {\n      this.selectedDesignations.delete(label);\n    } else {\n      this.selectedDesignations.add(label);\n    }\n    this.forceUpdate();\n  }\n\n  buildURI() {\n    let designationList = Array.from(this.selectedDesignations);\n    let queryString = {\n      \"bboxdonation$designation$ddDesignations\": designationList,\n      \"bboxdonation$gift$BBFormGiftChoice\": this.state[\"bboxdonation$gift$BBFormGiftChoice\"]\n    };\n    let base = `https://cmsdev.utdallas.edu/development/giving/?bboxdonation$gift$BBFormGiftChoice=${this.state[\"bboxdonation$gift$BBFormGiftChoice\"]}`;\n    if (this.state[\"bboxdonation$gift$BBFormGiftChoice\"] === \"bboxdonation_gift_lblChoiceSingleGift\") {\n      base += `&bboxdonation$gift$GivingLevel=${this.state[\"bboxdonation$gift$GivingLevel\"]}`;\n    } else {\n      base += `&bboxdonation$gift$PledgeAmount=${this.state[\"bboxdonation$gift$PledgeAmount\"]}`;\n    }\n    base += Array.from(this.selectedDesignations).reduce((accumulator, designation) => {\n      return accumulator + `&bboxdonation$designation$ddDesignations[]=${designation}`;\n    }, \"\");\n    return base;\n  }\n\n  render() {\n    let donationAmountButtons;\n    // If it's a one-time gift\n    if (this.state[\"bboxdonation$gift$BBFormGiftChoice\"] === \"bboxdonation_gift_lblChoiceSingleGift\") {\n      donationAmountButtons = giftAmounts.map((amount) => {\n        return (\n          <Radio\n            name=\"bboxdonation$gift$GivingLevel\"\n            value={amount}\n            selectedOption={this.state[\"bboxdonation$gift$GivingLevel\"]}\n            handleOptionChange={this.handleOptionChange}\n            label={amount}\n            key={amount}\n          />\n        );\n      });\n    // If it's a recurring gift\n    } else {\n      donationAmountButtons = pledgeAmounts.map((amount) => {\n        return (\n          <Radio\n            name=\"bboxdonation$gift$PledgeAmount\"\n            value={amount}\n            selectedOption={this.state[\"bboxdonation$gift$PledgeAmount\"]}\n            handleOptionChange={this.handleOptionChange}\n            label={amount}\n            key={amount}\n          />\n        );\n      });\n    }\n\n    let designationCheckboxes = designations.map((designation) => {\n      return (\n        <Checkbox\n          label={designation.label}\n          value={designation.value}\n          handleCheckboxChange={this.toggleCheckbox}\n          key={designation.value}\n        />\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <h1>Link Generator</h1>\n        <div className=\"giftType\">\n          <h3>Gift Type</h3>\n          <Radio\n            name=\"bboxdonation$gift$BBFormGiftChoice\"\n            value=\"bboxdonation_gift_lblChoiceSingleGift\"\n            selectedOption={this.state[\"bboxdonation$gift$BBFormGiftChoice\"]}\n            handleOptionChange={this.handleOptionChange}\n            label=\"One-time gift\"\n          />\n          <Radio\n            name=\"bboxdonation$gift$BBFormGiftChoice\"\n            value=\"bboxdonation_gift_lblChoicePledge\"\n            selectedOption={this.state[\"bboxdonation$gift$BBFormGiftChoice\"]}\n            handleOptionChange={this.handleOptionChange}\n            label=\"Pledge to Give\"\n          />\n        </div>\n        <div className=\"donationAmount\">\n          <h3>Donation Amount</h3>\n          {donationAmountButtons}\n        </div>\n        <div className=\"designations\">\n          <h3>Designations</h3>\n          {designationCheckboxes}\n        </div>\n        <div className=\"uri\">\n          <h3>Here's your Custom URL</h3>\n          <a href={this.buildURI()}>{this.buildURI()}</a>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}